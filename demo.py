import pymysql
import pandas as pd
import numpy as np
# d={}
# for k,v in d.items():
#     print(k,len(v))
df_obj = pd.DataFrame(np.random.randn(5,4), columns = ['a', 'b', 'c', 'd'])
print(df_obj)
print(df_obj.ix[:,-1])
if 5>df_obj.ix[:,-1].median():
    print('hhh')

# dd={}
# dd['p']=d
# print(dd)
# df2 = pd.DataFrame({'A': 1.,
#         'B': pd.Timestamp('20130102'),
#         'C': pd.Series(1, index=list(range(4)), dtype='float32'),
#         'D' : np.array([3] * 4,dtype='int32'),
#         'E': pd.Categorical(["test", "train", "test", "train"]),
#         'F': 'foo'})
# print(df2)
# print(len(pd.unique(df2['E'])))
# res=pd.Series([3,1,2,5])
# print(res.to_dict())
# res_standard = (res.max() - res) / (res.max() - res.min() + 0.1)

# print(res_standard)

import json
from  numpy import nan as nan
from decimal import Decimal

# lingyu=[]
# print(len(lingyu))
# res_dict={'查询结果': [{'batch': '第二批', 'classy': '理科', 'province': '四川',}], \
#     '相似学校推荐': {'宿州学院': Decimal('0.9930444790046656298600311042'), '沈阳工业大学': Decimal('0.5826790046656298600311041991'),}}
# res_json=json.dumps(res_dict,ensure_ascii=False)
# print(res_json)
# print(pd.Series({'宿州学院': 0.9930444790046656298600311042, '沈阳工业大学':np.float( Decimal('0.5826790046656298600311041991'))}))
# s=pd.Series({'宿州学院': 0.9930444790046656298600311042, '沈阳工业大学': Decimal('0.5826790046656298600311041991')})
# s=s.astype('float64')
# # s.apply(lambda x:x.astype(np.float64))
# print(s)
# res_dict=s.to_dict()
# print(s)
# res_json=json.dumps(res_dict,ensure_ascii=False)
# print(res_json)