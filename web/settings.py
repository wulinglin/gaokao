"""
Django settings for web project.

Generated by 'django-admin startproject' using Django 1.11.7.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '_d)l&&x+sw2csr%!fdcln5yq!m3f$_=$ib3bt$h%01l@*6pydg'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True#DEBUG设置为False的时候必须配置ALLOWED_HOSTS

# ALLOWED_HOSTS是为了限定请求中的host值,以防止黑客构造包来发送请求.只有在列表中的host才能访问.强烈建议不要使用*通配符去配置,另外当DEBUG设置为False的时候必须配置这个配置.否则会抛出异常.配置模板如下:
# ALLOWED_HOSTS = ['.example.com',   '.example.com.', ] #Also allow FQDN and subdomains; Also allow FQDN and subdomains

#ALLOWED_HOSTS = ['*']#允许其它网络访问


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'myweb',
]
# 中间件： Django 1.10 版本 更名为 MIDDLEWARE（单复同形）,写法也有改变。按照从上到下的顺序一个个执行中间件中的 process_request 函数，而其中 process_response 函数则是最前面的最后执行。
# 每一个请求都是先通过中间件中的 process_request 函数，这个函数返回 None 或者 HttpResponse 对象，如果返回前者，继续处理其它中间件，如果返回一个 HttpResponse，就处理中止，返回到网页上。
MIDDLEWARE_CLASSES = [#1.10之前，中间件的key为MIDDLEWARE_CLASSES, 1.10之后，为MIDDLEWARE。
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# CACHE_MIDDLEWARE_ALIAS = 'default'
# CACHE_MIDDLEWARE_SECONDS = 60
# CACHE_MIDDLEWARE_KEY_PREFIX = 'SiteCache'
#
# CACHES = {
#     'default': {
#         'BACKEND': 'django.core.cache.backends.dummy.DummyCache',
#         'LOCATION': '127.0.0.1:11211',
#     }
# }

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'cache_table_name',
        'TIMEOUT': 600,#缓存的过期时间
        'OPTIONS': {
            'MAX_ENTRIES': 100000#高速缓存允许的最大条目数，超出这个数则旧值将被删除
        #     cull_percentage :当达到 max_entries 的时候,被删除的条目比率。
        }
    }
}

ROOT_URLCONF = 'web.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR+"/templates",],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'web.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'gaokao_py3',
        'USER': 'root',
        'PASSWORD': 'mingming',
        'HOST': '172.19.235.29',
        'PORT': '3306',
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

# django默认时区是酱紫的：LANGUAGE_CODE = 'en-us';TIME_ZONE = 'UTC';
# Django会根据用户的语言偏好，在线地运用这些挂接指令去翻译Web应用程序
# 把它改成中国区域如下：
LANGUAGE_CODE = 'zh-Hans'#配置改为zh-cn:OSError: No translation files found for default language zh-cn.
# \Lib\site-packages\Django-1.10.2-py2.7.egg\django\conf\locale下无zh-cn文件夹，有zh-Hans简体中文和zh-Hant繁体中两个文件，
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True#国际化挂接是默认开启的，运行会增加开销；#国际化被缩写为“I18N”(18表示Internationlization这个单词首字母I和结尾字母N之间的字母有18个)。
# USE_I18N 设为 False ，不加载国际化支持机制。也可TEMPLATE_CONTEXT_PROCESSORS 设置中移除 'django.core.context_processors.i18n' 。
USE_L10N = True#本地化* 是指使一个国际化的程序为了在某个特定地区使用而进行实际翻译的过程

USE_TZ = True# 启用 USE_TZ = True 后，处理时间方面，有两条 “黄金法则”：保证存储到数据库中的是 UTC 时间；在函数之间传递时间参数时，确保时间已经转换成 UTC 时间；
# 启用 USE_TZ = True 后，需要写成：import datetime ;from django.utils.timezone import utc;utcnow = datetime.datetime.utcnow().replace(tzinfo=utc)

# STATIC_URL='/static/', 这个static 是在Django 具体APP下建立的static目录，用来存放静态资源。而STATICFILES_DIRS一般用来设置通用的静态资源，对应的目录不放在APP下，而是放在Project下，例如：
# STATICFILES_DIRS=（os.path.join(BASE_DIR, "common_static"),）
STATIC_URL = '/static/'

# STATIC_ROOT = os.path.join(BASE_DIR, 'static').replace('\\', '/')
# STATICFILES_DIRS = (
#     ('css', os.path.join(STATIC_ROOT, 'css').replace('\\', '/')),
#     ('js', os.path.join(STATIC_ROOT, 'js').replace('\\', '/')),
#     ('images', os.path.join(STATIC_ROOT, 'images').replace('\\', '/')),
# )
STATICFILES_DIRS = [
    os.path.join(BASE_DIR,'static'),
    # os.path.join(BASE_DIR,'uploads'),
]
# 事实上MEDIA_ROOT和MEDIA_URL代表的是用户上传后的文件一般保存的地方。我的理解是，可变文件的文件夹。
# 与这两个参数有联系的，是在Django的FileField和ImageField这样的Model类中，有upload_to参数可选。当upload_to设置相关的地址后，如：upload_to="username"；文件上传后将自动保存到 os.path.join(MEDIA_ROOT, upload_to)。
# 而MEDIA_URL,，则代表用户通过URL来访问这个本地地址的URL。如本机http://127.0.0.1/， MEDIA_URL设置为"/site_media/"，那么通过http://127.0.0.1/site_media/*** 就可以访问相关的上传图片或者其他资源。
# MEDIA_URL = '/uploads/'
# MEDIA_ROOT = os.path.join(BASE_DIR,'uploads')

#日志配置
# Loggers 向应用程序提供log接口
# Handlers 将log记录发送到指定的目的地（控制台输出，或写入文件或发向网络等等）
# Filters 提供一个分级策略控制 log 输出等级
# Formatters 指定输出的最终格式。
import logging
import django.utils.log
import logging.handlers

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,#if true then all loggers from the default configuration will be disabled.
    'formatters': {
        'standard': {
            'format': '%(asctime)s [%(threadName)s:%(thread)d] [%(name)s:%(lineno)d] [%(module)s:%(funcName)s] [%(levelname)s]- %(message)s'}  #日志格式
    },
    'filters': {
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
            },
        'default': {
            'level':'INFO',
            'class':'logging.handlers.RotatingFileHandler',
            'filename': 'log/all.log',
            'maxBytes': 1024*1024*5,
            'backupCount': 5,
            'formatter':'standard',
        },
        'error': {
            'level':'ERROR',
            'class':'logging.handlers.RotatingFileHandler',
            'filename': 'log/error.log',
            'maxBytes':1024*1024*5,
            'backupCount': 5,
            'formatter':'standard',
            },
        'console':{
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'standard'
        },
        'template_handler': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'log/template.log',
            'maxBytes': 1024 * 1024 * 5,
            'backupCount': 5,
            'formatter': 'standard',
        },
        'request_handler': {
            'level':'DEBUG',
            'class':'logging.handlers.RotatingFileHandler',
            'filename': 'log/script.log',
            'maxBytes': 1024*1024*5,
            'backupCount': 5,
            'formatter':'standard',
            },
        'scprits_handler': {
            'level':'DEBUG',
            'class':'logging.handlers.RotatingFileHandler',
            'filename':'log/script.log',
            'maxBytes': 1024*1024*5,
            'backupCount': 5,
            'formatter':'standard',
            }
    },
    'loggers': {
        'django': {
            'handlers': ['default', 'console'],
            'level': 'DEBUG',
            'propagate': False
        },
        'django.template': {
            'handlers': ['template_handler'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['request_handler'],
            'level': 'DEBUG',
            'propagate': False,
            },
        'scripts': {
            'handlers': ['scprits_handler'],
            'level': 'INFO',
            'propagate': False
        },
        'myweb.views': {
            'handlers': ['default', 'error'],
            'level': 'DEBUG',
            'propagate': True
        },
        },
    }

